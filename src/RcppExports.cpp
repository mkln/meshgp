// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// caching_pairwise_compare_uci
arma::vec caching_pairwise_compare_uci(const arma::mat& coords, const arma::field<arma::uvec>& indexing, const arma::vec& names, const arma::vec& ct_obs);
RcppExport SEXP _meshgp_caching_pairwise_compare_uci(SEXP coordsSEXP, SEXP indexingSEXP, SEXP namesSEXP, SEXP ct_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexing(indexingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type names(namesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ct_obs(ct_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(caching_pairwise_compare_uci(coords, indexing, names, ct_obs));
    return rcpp_result_gen;
END_RCPP
}
// vec_to_symmat
arma::mat vec_to_symmat(const arma::vec& x);
RcppExport SEXP _meshgp_vec_to_symmat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_to_symmat(x));
    return rcpp_result_gen;
END_RCPP
}
// xCovHUV
arma::mat xCovHUV(const arma::mat& coords, const arma::uvec& ind1, const arma::uvec& ind2, const arma::vec& cparams, const arma::mat& Dmat, bool same);
RcppExport SEXP _meshgp_xCovHUV(SEXP coordsSEXP, SEXP ind1SEXP, SEXP ind2SEXP, SEXP cparamsSEXP, SEXP DmatSEXP, SEXP sameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ind1(ind1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ind2(ind2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type cparams(cparamsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Dmat(DmatSEXP);
    Rcpp::traits::input_parameter< bool >::type same(sameSEXP);
    rcpp_result_gen = Rcpp::wrap(xCovHUV(coords, ind1, ind2, cparams, Dmat, same));
    return rcpp_result_gen;
END_RCPP
}
// mvCovAG20107
arma::mat mvCovAG20107(const arma::mat& coords, const arma::uvec& qv_block, const arma::uvec& ind1, const arma::uvec& ind2, const arma::vec& ai1, const arma::vec& ai2, const arma::vec& phi_i, const arma::vec& thetamv, const arma::mat& Dmat, bool same);
RcppExport SEXP _meshgp_mvCovAG20107(SEXP coordsSEXP, SEXP qv_blockSEXP, SEXP ind1SEXP, SEXP ind2SEXP, SEXP ai1SEXP, SEXP ai2SEXP, SEXP phi_iSEXP, SEXP thetamvSEXP, SEXP DmatSEXP, SEXP sameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qv_block(qv_blockSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ind1(ind1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ind2(ind2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ai1(ai1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ai2(ai2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_i(phi_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetamv(thetamvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Dmat(DmatSEXP);
    Rcpp::traits::input_parameter< bool >::type same(sameSEXP);
    rcpp_result_gen = Rcpp::wrap(mvCovAG20107(coords, qv_block, ind1, ind2, ai1, ai2, phi_i, thetamv, Dmat, same));
    return rcpp_result_gen;
END_RCPP
}
// mvCovAG20107_cx
arma::mat mvCovAG20107_cx(const arma::mat& coords1, const arma::uvec& qv_block1, const arma::mat& coords2, const arma::uvec& qv_block2, const arma::vec& ai1, const arma::vec& ai2, const arma::vec& phi_i, const arma::vec& thetamv, const arma::mat& Dmat, bool same);
RcppExport SEXP _meshgp_mvCovAG20107_cx(SEXP coords1SEXP, SEXP qv_block1SEXP, SEXP coords2SEXP, SEXP qv_block2SEXP, SEXP ai1SEXP, SEXP ai2SEXP, SEXP phi_iSEXP, SEXP thetamvSEXP, SEXP DmatSEXP, SEXP sameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords1(coords1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qv_block1(qv_block1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords2(coords2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qv_block2(qv_block2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ai1(ai1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ai2(ai2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_i(phi_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetamv(thetamvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Dmat(DmatSEXP);
    Rcpp::traits::input_parameter< bool >::type same(sameSEXP);
    rcpp_result_gen = Rcpp::wrap(mvCovAG20107_cx(coords1, qv_block1, coords2, qv_block2, ai1, ai2, phi_i, thetamv, Dmat, same));
    return rcpp_result_gen;
END_RCPP
}
// hex_to_dec
int hex_to_dec(const std::string& hex_value);
RcppExport SEXP _meshgp_hex_to_dec(SEXP hex_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type hex_value(hex_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(hex_to_dec(hex_value));
    return rcpp_result_gen;
END_RCPP
}
// hex_to_dec_vec
std::vector<int> hex_to_dec_vec(const std::vector<std::string>& vec_hex);
RcppExport SEXP _meshgp_hex_to_dec_vec(SEXP vec_hexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type vec_hex(vec_hexSEXP);
    rcpp_result_gen = Rcpp::wrap(hex_to_dec_vec(vec_hex));
    return rcpp_result_gen;
END_RCPP
}
// list_mean
arma::mat list_mean(const arma::field<arma::mat>& x);
RcppExport SEXP _meshgp_list_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// list_qtile
arma::mat list_qtile(const arma::field<arma::mat>& x, double q);
RcppExport SEXP _meshgp_list_qtile(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(list_qtile(x, q));
    return rcpp_result_gen;
END_RCPP
}
// blanket
arma::field<arma::uvec> blanket(const arma::field<arma::uvec>& parents, const arma::field<arma::uvec>& children, const arma::uvec& names, const arma::uvec& block_ct_obs);
RcppExport SEXP _meshgp_blanket(SEXP parentsSEXP, SEXP childrenSEXP, SEXP namesSEXP, SEXP block_ct_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type names(namesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type block_ct_obs(block_ct_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(blanket(parents, children, names, block_ct_obs));
    return rcpp_result_gen;
END_RCPP
}
// coloring
arma::ivec coloring(const arma::field<arma::uvec>& blanket, const arma::uvec& block_names, const arma::uvec& block_ct_obs);
RcppExport SEXP _meshgp_coloring(SEXP blanketSEXP, SEXP block_namesSEXP, SEXP block_ct_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type blanket(blanketSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type block_names(block_namesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type block_ct_obs(block_ct_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(coloring(blanket, block_names, block_ct_obs));
    return rcpp_result_gen;
END_RCPP
}
// mesh_gibbs_groups
arma::mat mesh_gibbs_groups(const arma::mat& layers_descr, const arma::uvec& Mv, bool rfc);
RcppExport SEXP _meshgp_mesh_gibbs_groups(SEXP layers_descrSEXP, SEXP MvSEXP, SEXP rfcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type layers_descr(layers_descrSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Mv(MvSEXP);
    Rcpp::traits::input_parameter< bool >::type rfc(rfcSEXP);
    rcpp_result_gen = Rcpp::wrap(mesh_gibbs_groups(layers_descr, Mv, rfc));
    return rcpp_result_gen;
END_RCPP
}
// kthresholdscp
arma::vec kthresholdscp(arma::vec x, int k);
RcppExport SEXP _meshgp_kthresholdscp(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kthresholdscp(x, k));
    return rcpp_result_gen;
END_RCPP
}
// part_axis_parallel
arma::mat part_axis_parallel(const arma::mat& coords, const arma::vec& Mv, int n_threads, bool verbose);
RcppExport SEXP _meshgp_part_axis_parallel(SEXP coordsSEXP, SEXP MvSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Mv(MvSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(part_axis_parallel(coords, Mv, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// part_axis_parallel_fixed
arma::mat part_axis_parallel_fixed(const arma::mat& coords, const arma::field<arma::vec>& thresholds, int n_threads);
RcppExport SEXP _meshgp_part_axis_parallel_fixed(SEXP coordsSEXP, SEXP thresholdsSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(part_axis_parallel_fixed(coords, thresholds, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// mesh_graph_cpp
Rcpp::List mesh_graph_cpp(const arma::mat& layers_descr, const arma::uvec& Mv, bool rfc, bool verbose);
RcppExport SEXP _meshgp_mesh_graph_cpp(SEXP layers_descrSEXP, SEXP MvSEXP, SEXP rfcSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type layers_descr(layers_descrSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Mv(MvSEXP);
    Rcpp::traits::input_parameter< bool >::type rfc(rfcSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mesh_graph_cpp(layers_descr, Mv, rfc, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mvn
arma::mat mvn(int n, const arma::vec& mu, const arma::mat sigma);
RcppExport SEXP _meshgp_mvn(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvn(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// eigenchol
Eigen::SparseMatrix<double> eigenchol(const Eigen::SparseMatrix<double>& A);
RcppExport SEXP _meshgp_eigenchol(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(eigenchol(A));
    return rcpp_result_gen;
END_RCPP
}
// qmgp_Cinv
Eigen::SparseMatrix<double> qmgp_Cinv(const arma::mat& coords, const arma::uvec& blocking, const arma::field<arma::uvec>& parents, const arma::vec& block_names, const arma::field<arma::uvec>& indexing, const arma::vec& theta, const arma::mat& Dmat, int num_threads, bool cache, bool verbose, bool debug);
RcppExport SEXP _meshgp_qmgp_Cinv(SEXP coordsSEXP, SEXP blockingSEXP, SEXP parentsSEXP, SEXP block_namesSEXP, SEXP indexingSEXP, SEXP thetaSEXP, SEXP DmatSEXP, SEXP num_threadsSEXP, SEXP cacheSEXP, SEXP verboseSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type blocking(blockingSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type block_names(block_namesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexing(indexingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Dmat(DmatSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(qmgp_Cinv(coords, blocking, parents, block_names, indexing, theta, Dmat, num_threads, cache, verbose, debug));
    return rcpp_result_gen;
END_RCPP
}
// qmgp_sampler
Eigen::VectorXd qmgp_sampler(const arma::mat& coords, const arma::uvec& blocking, const arma::field<arma::uvec>& parents, const arma::vec& block_names, const arma::field<arma::uvec>& indexing, const arma::vec& theta, const arma::mat& Dmat, int num_threads, bool cache, bool verbose, bool debug);
RcppExport SEXP _meshgp_qmgp_sampler(SEXP coordsSEXP, SEXP blockingSEXP, SEXP parentsSEXP, SEXP block_namesSEXP, SEXP indexingSEXP, SEXP thetaSEXP, SEXP DmatSEXP, SEXP num_threadsSEXP, SEXP cacheSEXP, SEXP verboseSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type blocking(blockingSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type block_names(block_namesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexing(indexingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Dmat(DmatSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(qmgp_sampler(coords, blocking, parents, block_names, indexing, theta, Dmat, num_threads, cache, verbose, debug));
    return rcpp_result_gen;
END_RCPP
}
// qmeshgp_mv_mcmc
Rcpp::List qmeshgp_mv_mcmc(const arma::vec& y, const arma::mat& X, const arma::mat& coords, const arma::uvec& mv_id, const arma::uvec& blocking, const arma::field<arma::uvec>& parents, const arma::field<arma::uvec>& children, const arma::vec& layer_names, const arma::vec& layer_gibbs_group, const arma::field<arma::uvec>& indexing, const arma::mat& set_unif_bounds_in, const arma::mat& beta_Vi, const arma::vec& tausq_ab, const arma::vec& start_w, const double& sigmasq, const arma::vec& theta, const arma::vec& beta, const double& tausq, const arma::mat& mcmcsd, int mcmc_keep, int mcmc_burn, int mcmc_thin, int num_threads, bool adapting, bool cache, bool cache_gibbs, bool verbose, bool debug, bool printall, bool sample_beta, bool sample_tausq, bool sample_sigmasq, bool sample_theta, bool sample_w);
RcppExport SEXP _meshgp_qmeshgp_mv_mcmc(SEXP ySEXP, SEXP XSEXP, SEXP coordsSEXP, SEXP mv_idSEXP, SEXP blockingSEXP, SEXP parentsSEXP, SEXP childrenSEXP, SEXP layer_namesSEXP, SEXP layer_gibbs_groupSEXP, SEXP indexingSEXP, SEXP set_unif_bounds_inSEXP, SEXP beta_ViSEXP, SEXP tausq_abSEXP, SEXP start_wSEXP, SEXP sigmasqSEXP, SEXP thetaSEXP, SEXP betaSEXP, SEXP tausqSEXP, SEXP mcmcsdSEXP, SEXP mcmc_keepSEXP, SEXP mcmc_burnSEXP, SEXP mcmc_thinSEXP, SEXP num_threadsSEXP, SEXP adaptingSEXP, SEXP cacheSEXP, SEXP cache_gibbsSEXP, SEXP verboseSEXP, SEXP debugSEXP, SEXP printallSEXP, SEXP sample_betaSEXP, SEXP sample_tausqSEXP, SEXP sample_sigmasqSEXP, SEXP sample_thetaSEXP, SEXP sample_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type mv_id(mv_idSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type blocking(blockingSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type layer_names(layer_namesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type layer_gibbs_group(layer_gibbs_groupSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexing(indexingSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type set_unif_bounds_in(set_unif_bounds_inSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_Vi(beta_ViSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tausq_ab(tausq_abSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_w(start_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mcmcsd(mcmcsdSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_keep(mcmc_keepSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_burn(mcmc_burnSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_thin(mcmc_thinSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type adapting(adaptingSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< bool >::type cache_gibbs(cache_gibbsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type printall(printallSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_beta(sample_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_tausq(sample_tausqSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_sigmasq(sample_sigmasqSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_theta(sample_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_w(sample_wSEXP);
    rcpp_result_gen = Rcpp::wrap(qmeshgp_mv_mcmc(y, X, coords, mv_id, blocking, parents, children, layer_names, layer_gibbs_group, indexing, set_unif_bounds_in, beta_Vi, tausq_ab, start_w, sigmasq, theta, beta, tausq, mcmcsd, mcmc_keep, mcmc_burn, mcmc_thin, num_threads, adapting, cache, cache_gibbs, verbose, debug, printall, sample_beta, sample_tausq, sample_sigmasq, sample_theta, sample_w));
    return rcpp_result_gen;
END_RCPP
}
// mvmesh_predict_by_block_base
Rcpp::List mvmesh_predict_by_block_base(const arma::field<arma::mat>& newcoords, const arma::field<arma::uvec>& new_mv_id, const arma::field<arma::mat>& newx, const arma::uvec& names, const arma::field<arma::mat>& w_mcmc, const arma::mat& theta_mcmc, const arma::cube& beta_mcmc, const arma::mat& tausq_mcmc, const arma::field<arma::uvec>& indexing, const arma::field<arma::uvec>& parents_indexing, const arma::field<arma::uvec>& parents, const arma::mat& coords, const arma::uvec& mv_id, int npars, int dd, int pp, int n_threads);
RcppExport SEXP _meshgp_mvmesh_predict_by_block_base(SEXP newcoordsSEXP, SEXP new_mv_idSEXP, SEXP newxSEXP, SEXP namesSEXP, SEXP w_mcmcSEXP, SEXP theta_mcmcSEXP, SEXP beta_mcmcSEXP, SEXP tausq_mcmcSEXP, SEXP indexingSEXP, SEXP parents_indexingSEXP, SEXP parentsSEXP, SEXP coordsSEXP, SEXP mv_idSEXP, SEXP nparsSEXP, SEXP ddSEXP, SEXP ppSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type newcoords(newcoordsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type new_mv_id(new_mv_idSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type newx(newxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type names(namesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type w_mcmc(w_mcmcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta_mcmc(theta_mcmcSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type beta_mcmc(beta_mcmcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tausq_mcmc(tausq_mcmcSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexing(indexingSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type parents_indexing(parents_indexingSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type mv_id(mv_idSEXP);
    Rcpp::traits::input_parameter< int >::type npars(nparsSEXP);
    Rcpp::traits::input_parameter< int >::type dd(ddSEXP);
    Rcpp::traits::input_parameter< int >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(mvmesh_predict_by_block_base(newcoords, new_mv_id, newx, names, w_mcmc, theta_mcmc, beta_mcmc, tausq_mcmc, indexing, parents_indexing, parents, coords, mv_id, npars, dd, pp, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// qmeshgp_svc_mcmc
Rcpp::List qmeshgp_svc_mcmc(const arma::mat& y, const arma::mat& X, const arma::mat& Z, const arma::mat& coords, const arma::uvec& blocking, const arma::field<arma::uvec>& parents, const arma::field<arma::uvec>& children, const arma::vec& layer_names, const arma::vec& layer_gibbs_group, const arma::field<arma::uvec>& indexing, const arma::mat& set_unif_bounds_in, const arma::mat& beta_Vi, const arma::vec& sigmasq_ab, const arma::vec& tausq_ab, const arma::mat& start_w, const arma::vec& theta, const arma::vec& beta, const double& tausq, const double& sigmasq, const arma::mat& mcmcsd, const Rcpp::List& recover, int mcmc_keep, int mcmc_burn, int mcmc_thin, int num_threads, bool adapting, bool cache, bool cache_gibbs, bool rfc, bool verbose, bool debug, bool printall, bool saving, bool sample_beta, bool sample_tausq, bool sample_sigmasq, bool sample_theta, bool sample_w);
RcppExport SEXP _meshgp_qmeshgp_svc_mcmc(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP coordsSEXP, SEXP blockingSEXP, SEXP parentsSEXP, SEXP childrenSEXP, SEXP layer_namesSEXP, SEXP layer_gibbs_groupSEXP, SEXP indexingSEXP, SEXP set_unif_bounds_inSEXP, SEXP beta_ViSEXP, SEXP sigmasq_abSEXP, SEXP tausq_abSEXP, SEXP start_wSEXP, SEXP thetaSEXP, SEXP betaSEXP, SEXP tausqSEXP, SEXP sigmasqSEXP, SEXP mcmcsdSEXP, SEXP recoverSEXP, SEXP mcmc_keepSEXP, SEXP mcmc_burnSEXP, SEXP mcmc_thinSEXP, SEXP num_threadsSEXP, SEXP adaptingSEXP, SEXP cacheSEXP, SEXP cache_gibbsSEXP, SEXP rfcSEXP, SEXP verboseSEXP, SEXP debugSEXP, SEXP printallSEXP, SEXP savingSEXP, SEXP sample_betaSEXP, SEXP sample_tausqSEXP, SEXP sample_sigmasqSEXP, SEXP sample_thetaSEXP, SEXP sample_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type blocking(blockingSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type layer_names(layer_namesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type layer_gibbs_group(layer_gibbs_groupSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexing(indexingSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type set_unif_bounds_in(set_unif_bounds_inSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_Vi(beta_ViSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmasq_ab(sigmasq_abSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tausq_ab(tausq_abSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type start_w(start_wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mcmcsd(mcmcsdSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type recover(recoverSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_keep(mcmc_keepSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_burn(mcmc_burnSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_thin(mcmc_thinSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type adapting(adaptingSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< bool >::type cache_gibbs(cache_gibbsSEXP);
    Rcpp::traits::input_parameter< bool >::type rfc(rfcSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type printall(printallSEXP);
    Rcpp::traits::input_parameter< bool >::type saving(savingSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_beta(sample_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_tausq(sample_tausqSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_sigmasq(sample_sigmasqSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_theta(sample_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_w(sample_wSEXP);
    rcpp_result_gen = Rcpp::wrap(qmeshgp_svc_mcmc(y, X, Z, coords, blocking, parents, children, layer_names, layer_gibbs_group, indexing, set_unif_bounds_in, beta_Vi, sigmasq_ab, tausq_ab, start_w, theta, beta, tausq, sigmasq, mcmcsd, recover, mcmc_keep, mcmc_burn, mcmc_thin, num_threads, adapting, cache, cache_gibbs, rfc, verbose, debug, printall, saving, sample_beta, sample_tausq, sample_sigmasq, sample_theta, sample_w));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_meshgp_caching_pairwise_compare_uci", (DL_FUNC) &_meshgp_caching_pairwise_compare_uci, 4},
    {"_meshgp_vec_to_symmat", (DL_FUNC) &_meshgp_vec_to_symmat, 1},
    {"_meshgp_xCovHUV", (DL_FUNC) &_meshgp_xCovHUV, 6},
    {"_meshgp_mvCovAG20107", (DL_FUNC) &_meshgp_mvCovAG20107, 10},
    {"_meshgp_mvCovAG20107_cx", (DL_FUNC) &_meshgp_mvCovAG20107_cx, 10},
    {"_meshgp_hex_to_dec", (DL_FUNC) &_meshgp_hex_to_dec, 1},
    {"_meshgp_hex_to_dec_vec", (DL_FUNC) &_meshgp_hex_to_dec_vec, 1},
    {"_meshgp_list_mean", (DL_FUNC) &_meshgp_list_mean, 1},
    {"_meshgp_list_qtile", (DL_FUNC) &_meshgp_list_qtile, 2},
    {"_meshgp_blanket", (DL_FUNC) &_meshgp_blanket, 4},
    {"_meshgp_coloring", (DL_FUNC) &_meshgp_coloring, 3},
    {"_meshgp_mesh_gibbs_groups", (DL_FUNC) &_meshgp_mesh_gibbs_groups, 3},
    {"_meshgp_kthresholdscp", (DL_FUNC) &_meshgp_kthresholdscp, 2},
    {"_meshgp_part_axis_parallel", (DL_FUNC) &_meshgp_part_axis_parallel, 4},
    {"_meshgp_part_axis_parallel_fixed", (DL_FUNC) &_meshgp_part_axis_parallel_fixed, 3},
    {"_meshgp_mesh_graph_cpp", (DL_FUNC) &_meshgp_mesh_graph_cpp, 4},
    {"_meshgp_mvn", (DL_FUNC) &_meshgp_mvn, 3},
    {"_meshgp_eigenchol", (DL_FUNC) &_meshgp_eigenchol, 1},
    {"_meshgp_qmgp_Cinv", (DL_FUNC) &_meshgp_qmgp_Cinv, 11},
    {"_meshgp_qmgp_sampler", (DL_FUNC) &_meshgp_qmgp_sampler, 11},
    {"_meshgp_qmeshgp_mv_mcmc", (DL_FUNC) &_meshgp_qmeshgp_mv_mcmc, 34},
    {"_meshgp_mvmesh_predict_by_block_base", (DL_FUNC) &_meshgp_mvmesh_predict_by_block_base, 17},
    {"_meshgp_qmeshgp_svc_mcmc", (DL_FUNC) &_meshgp_qmeshgp_svc_mcmc, 38},
    {NULL, NULL, 0}
};

RcppExport void R_init_meshgp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
